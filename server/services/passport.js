/**
 * Services folder has files with helper modules and business logic, like Passport
 * Passport.js has all passport configurations 
 */

const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
//const FacebookStrategy = require('passport-facebook-oauth').strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys'); //.. means go up one folder


// User object = model class, provides relation/handle to underlying collection that exists in MongoDB
// we can use model class (User) to create model instance and save it to database 
const User = mongoose.model('users'); 

/**put identifying piece of information into the cookie
 * user = what we just pulled out of the database
 * done = callback for passport. 1st arg is error message (or null), 2nd arg identifies user in follow up requests
 * not the google profile id. Here user.id = id generated by mongo and assigned to a record
 **/
passport.serializeUser((user, done) => { 
  done(null, user.id); 
});

// pull out identifying piece of information from the cookie
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  })
});


passport.use(
  new GoogleStrategy({
    clientID: keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback'
  }, 
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleId: profile.id }).then((existingUser) => {
        if (existingUser) {
          // we already have a record with the given profile ID
          done(null, existingUser); //tells passport we're done
        } else {
          // we don't have a user record with that ID, make a new mongoose model instance, then save it to user collection
          new User({ googleId: profile.id }).save().then(user => done(null, user)); 
        }
      })
    }
  )
);